from flask import Flask, request, jsonify
from PIL import Image
import imagehash
import os
import json

app = Flask(__name__)

# Directory where images are stored
IMAGE_DIRECTORY = 'images/'  # Put your images in this folder

# Function to get perceptual hash of an image
def get_image_hash(image_path):
    image = Image.open(image_path)
    return imagehash.average_hash(image)

# Function to compare two hashes and return similarity (lower distance means more similar)
def compare_hashes(hash1, hash2):
    return hash1 - hash2  # Hamming distance between the two hashes

# Route to handle image upload and search for similar images
@app.route('/search-image', methods=['POST'])
def search_image():
    file = request.files['image']
    
    # Save the uploaded image temporarily
    uploaded_image_path = 'uploaded_image.jpg'
    file.save(uploaded_image_path)
    
    # Generate hash for uploaded image
    uploaded_image_hash = get_image_hash(uploaded_image_path)
    
    # List to store paths of similar images
    similar_images = []
    
    # Iterate through images in the IMAGE_DIRECTORY and compare their hashes
    for image_file in os.listdir(IMAGE_DIRECTORY):
        image_path = os.path.join(IMAGE_DIRECTORY, image_file)
        image_hash = get_image_hash(image_path)
        
        # Compare the hashes (using a threshold to consider it a match)
        hash_distance = compare_hashes(uploaded_image_hash, image_hash)
        
        # Set a threshold for how similar the images need to be (e.g., max 5 bits difference)
        if hash_distance <= 5:
            similar_images.append(image_path)
    
    # Return similar images as a JSON response
    return jsonify({"similar_images": similar_images})

if __name__ == '__main__':
    app.run(debug=True)
